// test enum

// flag style
enum Enum1
   Val1 = 1
   Val2 = 2
   Val4 = 4
   Val8 = 8

// increments by default
enum Enum2
   Val0 // default to 0
   Val1 // default to 1
   Val4 = 4
   Val5 // default to 5
   ValA = 0
   ValB // default to 1
   ValC = -4
   ValD // default to -3
   //Unused // not used, should trigger warning

// expressions and constants
enum Enum3
   Val1 = 4*3+(1<<3) // 20 
   Val2 = 0x_8000
   Val3 = 0b_1000_0001
   // todo - make this possible
   //val4 = val1-4
   //val5 = 1+4*6*Enum1.val2
 
[Entry]
export (bool,i32,i32) TestEnum()
   i32 p,t = 0,0 // passed, tested
   
   p,t += CheckVals()
   p,t += CheckUse()

   return p==t,p,t

(i32,i32) CheckUse()
   i32 p,t = 0,0 // passed, tested
  
   // enums not typed, treated as i32 constants
   i32 a = Enum1.Val4
   if a == 4 && a == Enum1.Val4
      p++
   t++  
   // todo - allow this?   Enum1 b = Enum1.Val1

   if (Enum1.Val1 | Enum1.Val2) == 3
      p++
   t++ 
   
   // use as parameter
   if Double(Enum1.Val2) == Enum1.Val4
      p++
   t++ 
   
   return p,t
   
(i32) Double(i32 value)
   return 2*value
     
   
(i32,i32) CheckVals()
   i32 p,t = 0,0 // passed, tested
   
   if Enum1.Val1 == 1 && Enum1.Val2 == 2 && Enum1.Val4 == 4 && Enum1.Val8 == 8
      p++
   t++
   
   if Enum2.Val0 == 0 && Enum2.Val1 == 1 && Enum2.Val4 == 4 && \
      Enum2.Val5 == 5 && Enum2.ValA == 0 && Enum2.ValB == 1 && \
      Enum2.ValC == -4 && Enum2.ValD == -3
      p++
   t++

   if Enum3.Val1 == 20 && Enum3.Val2 == 32768 && Enum3.Val3 == 129
      p++
   t++
   
   return p,t


// end of file