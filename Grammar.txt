! Grammar and token for CLScript
! in GOLD parser format to check correctness
! This is not an actual GOLD parser script, since it needs some lexical tricks 
! to make the language indentation based
!
! Chris Lomont Oct 2016
! format augmented EBNF
! X = A B C
! 'token' in single quotes
! 'A'-'Z' range
! [optional]
! {zero or more times}
! item* means 0 or more times
! item+ means 1 or more times
! (A|B)|C means (A or B) or C
! 
! EOL is end of line
! INDENT/UNINDENT - commands for parser to check indentation levels
! tokens and grammar
!

"Name"    = 'CL Script'
"Version" = '2016'
"Author"  = 'Chris Lomont' 
"About"   = 'CL Script is designed for small, embedded devices.'

"Case Sensitive" = True
"Start Symbol"   = <Declarations>

! ===================================================================
! Literal values
!
! Hex via 0xDEED, bin via 0b0010, decimal as usual
! float has decimal 0.121, allows +1.2e4, -1.1e-12
! All support underscore as separator like 1_000_000
!
! Strings are ASCII, no " or '. String interpolation via "test {x},{y}"
! ===================================================================

{Hex Digit}      = {digit} + [abcdefABCDEF]
{Bin Digit}      = [01]

! allow underscores in numbers after the first character for numbers

! float has a digit on at least one side of a '.' and an optional suffix, no leading '_'
FloatLiteral     = (({digit}({digit}|'_')*'.'({digit}|'_')*) | (({digit}({digit}|'_')*)?'.'{digit}({digit}|'_')*))(e('+'|'-')?{digit}({digit}|'_')*)? 
                                     
DecLiteral       = {digit}({digit}|'_')*
BinLiteral       = 0b{Bin Digit}({Bin Digit}|'_')*
HexLiteral       = 0x{Hex Digit}({Hex Digit}|'_')*


{String Ch}      = {Printable} - ["\]
{Char Ch}        = {Printable} - ['']

StringLiteral    = '"'( {String Ch} | '\'{Printable} )* '"'
CharLiteral      = '' ( {Char Ch} | '\'{Printable} )''                 

! Identifiers
! start with a letter or underscore, add digits to the mix thereafter

{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit} + [_]

ID               = {Id Head}{Id Tail}*   ! identifier is name

! For program structure, end of line and indent/dedent are tokens created by parser
! odd tokens here allow parsing text from our lexer with the Gold testing tools.
EOL              = '`E' ! end of line
INDENT           = '`I' ! indent line
DEDENT           = '`U' ! unindent line

! allow multiple EOL wherever one is allowed
<EOLs> ::= EOL <EOLs> | EOL

! ===================================================================
! Comments - allow nested comments
! ===================================================================

Comment Block @= {Nesting = All, Advance = Character, Ending = Closed }
Comment Start  = '/*'
Comment End    = '*/'
Comment Line   = '//'

! ===================================================================
! each file has this form. It is a list of declarations, each ending with EOL
! ===================================================================
<Declarations> ::= <Declaration> <Declarations> ! a file is a list of zero or more declarations
                 | 
<Declaration>  ::= <Import Declaration>         ! include file or definitions, file inserted here
                 | <Module Declaration>         ! name the current module
                 | <Attribute Declaration>      ! tag the next declaration with an attribute 
                 | <Enum Declaration>           ! define an enum
                 | <Type Declaration>           ! define a type
                 | <Variable Declaration>       ! define or import a variable                 
                 | <Function Declaration>       ! define or import a function
                 | EOL                          ! allow blank lines

! import: file, variable, func
! export: variable, func
<Optional Export> ::= 'export' | ! variable, func
<Optional Import> ::= 'import' | ! variable, func, file
<Optional Const>  ::= 'const'  | ! variable
                   

! ===================================================================
! import file for code and/or definitions. Prefer *.cls extension (Chris Lomont Script)
! ===================================================================
<Import Declaration> ::= 'import' StringLiteral EOL

! ===================================================================
! Name a module, which is a prefix for all items following
! ===================================================================
<Module Declaration> ::= 'module' ID EOL

! ===================================================================
! Attribute, possible on type, enum, variable, function, affects next one
!
! [Var "string1" ....]
! ===================================================================
<Attribute Declaration> ::= '[' ID <Attribute Strings> ']' EOL
! 0 or more strings             
<Attribute Strings>   ::= StringLiteral <Attribute Strings> | 

! ===================================================================
! Enumerations
!
! enum Bob
!    item1 = 0b0001
!    item2 = 0b0002
!    item3 = 1234
!    item5
!
! use via Bob.item1, can cast to/from i32 only, can & and | 
! stored in i32
!
! ===================================================================
<Enum Declaration> ::= 'enum' ID <EOLs> INDENT <Enum Values> DEDENT
! one or more values
<Enum Values>      ::= <Enum Value> <Enum Values>
                     | <Enum Value>
<Enum Value>       ::= ID <EOLs>
                     | ID '=' <Expression> <EOLs> ! expression must be evaluated to integral literal at compile time

! ===================================================================
! basic types are built in types or user defined types
! ===================================================================
<Type>  ::= 'bool'     ! boolean takes on true or false
          | 'i32'      ! signed 32 bit integer
          | 'r32'      ! 32 bit floating point, IEEE 754 if possible, perhaps s15.16 fixed point
          | 'string'   ! ASCII string
          | 'char'     ! a single byte ASCII character
          | ID         ! user type


! ===================================================================
! A Type Declaration defines a new type
!
! type Point
!     r32 x y
!     i32 r g b 
!     RGB color[3],c2
! export type Type2
!     i32 a
! ===================================================================
<Type Declaration> ::= 'type' ID <EOLs> INDENT <Type Member Definitions> DEDENT

! nonempty list of variable type and names
<Type Member Definitions>  ::= <Variable Type and Names> <EOLs> <Type Member Definitions>
                             | <Variable Type and Names> <EOLs>

! ===================================================================
! Variable Declaration
!
! export const i32 x,y = 0,0      // multiple assignment, export constants
! i32 [4] arr = 0,1,2,3           // array assignment
! r32 [2,2] mat = 1.0,0.0,0.0,1.0 // multi array
! Vec3 a = 0.0,0.0,0.0            // fields
! import i32 a                    // import var name
! export r32 bob = 1.0            // export
! RGB color = 0.0,1.0,0.0         //
! const string [2] txts = "bob" "fred"  // constants
!
! ===================================================================
<Variable Declaration>    ::= <Import Variable> EOL | <Normal Variable> EOL 

<Import Variable> ::= 'import'          <Optional Const> <Variable Type and Names> 
<Normal Variable> ::= <Optional Export> <Optional Const> <Variable Definition>                

! deifne a variable, used globally and local to functions
<Variable Definition>     ::= <Variable Type and Names> <Variable Initializer>
               
<Variable Type and Names> ::= <Type> <ID List> 
<ID List>                 ::= ID <Optional Array> ',' <ID List> | ID <Optional Array>
! array can be single or multi dimensional                  
<Optional Array>          ::= '[' <Expression List1> ']' |

<Variable Initializer>    ::= '=' <Initializer List>  |             ! initializer or not
<Initializer List>        ::= <Expression List1>  
                           
! ===================================================================
! Function  Declaration
! 
! import (i32) sqrt (i32 value)
! import fail
!
! (i32) times (i32 a, i32 b)
!    return a * b
!
! // call with swap (a, b), no return value
! (i32,i32) swap (i32 & a, i32 & b)
!    i32 t = a
!    a = b
!    b = t
!    // how about a b = b a ? can do on stack nicely
!    return b,a
!
! (Vec) op+(Vec a,Vec b)
!    Vec v = a.x + b.x,a.y + b.y
!    return v
!
! () doNothing()
!   // nothing to do
! 
! (i32,bool) ret2() // multiple return
!     return 1,true
!
! ===================================================================
! import has no definition block
<Function Declaration>    ::= 'import' <Function Prototype> <EOLs>
                            | 'export' <Function Prototype> <EOLs> <Block> 
                            | <Function Prototype> <EOLs> <Block>

! return type, name, parameters, EOL
<Function Prototype> ::= '(' <Return Types> ')' <Function Name> '(' <Function Parameters> ')'

!0 or more types
<Return Types>       ::= <Type> ',' <Return Types> | <Type> |

! names are identifiers, or operator overloads                      
<Function Name> ::= ID
                  | 'op+'
                  | 'op-'
                  | 'op/'
                  | 'op*'
                  | 'op=='
                  | 'op!='
       
! 0 or more parameters
<Function Parameters>  ::= <Parameter> ',' <Function Parameters> | <Parameter> |   
                            
! parameter is type, optional reference, and name 
<Parameter>     ::= <Type> <Optional Reference> ID <Optional Empty Array>       

<Optional Empty Array> ::= '[' <Commas> ']' |
<Commas> ::= ',' <Commas> |                         

! reference allows passing built in type (i32, r32, etc) by reference
<Optional Reference>     ::= '&' | 

! ===================================================================
! Statements
! i32 a b c = 1 2 (3+4)
! for i in 1..10
! for i in a..b by 2
! for item in array
! if a 
!    clause1
! else
!    clause2
! a = b + c
! r g b = 1.0 2.0 3.0
! while ! done
!    if a = 5
!       break
! ===================================================================
! zero or more statements
<Statements> ::= <Statement> <Statements> |

<Statement>   ::= <Variable Definition> <EOLs>
                | <Assign Statement>    <EOLs>
                | <If Statement>
                | <For Statement>       
                | 'while' <Expression>  <EOLs> <Block>
                | <Function Call>       <EOLs>
                | <Jump Statement>      <EOLs>

! assign some values to some variables
! a = 1
! a,b,c = 1,2,3
! bob[10].item[1],b += 0, 1
<Assign Statement>  ::= <Assign List> <Assign Operator> <Expression List1> | <Assign List> <Unary Assign>
<Assign Operator>   ::= '='
                      | '+='
                      | '-='
                      | '*='
                      | '/='
                      | '^='
                      | '&='
                      | '|='
                      | '%='
                      | '>>='
                      | '<<='
                      | '>>>='
                      | '<<<='
<Unary Assign>      ::= '++' ! must have 0 items in expression list
                      | '--' ! must have 0 items in expression list

! a list of one or more things to assign expressions to
<Assign List> ::= <Assign Item> ',' <Assign List> | <Assign Item>
              
! one or more items to assign to
! also handle things like bob[10].field.array[12,23]
! how about a[0][3], example, char in a string from array?
! form is ID ('[' list '])
<Assign Item> ::= ID 
                | ID '.' <Assign Item>
                | ID '[' <Expression List1> ']' 
                | ID '[' <Expression List1> ']' '.' <Assign Item>

! if statement follows C somewhat
<If Statement>   ::= 'if' <Expression> <EOLs> <Block>
                   | 'if' <Expression> <EOLS> <Then St> 'else' <EOLs> <Block>
                   | 'if' <Expression> <EOLs> <Then St> 'else' <If Statement>
<Then St>        ::=  <Block> ! this trick makes the grammar LALR

! function call 
<Function Call>  ::= ID '(' <Expression List0> ')'
               
! jump around
<Jump Statement> ::= break 
                   | continue 
                   | return <Expression List0> ! 0 or more items

! for i in a,b,c goes a to b by c, c optional, deduced to be 1 or -1, can be expressions
! also supports for i in array
<For Statement>  ::= for ID in <Expression List1> <EOLs> <Block>

! a block is an indented collection of statements
<Block>          ::= INDENT <Statements> DEDENT
             

! ===================================================================
! Here begins C style levels of operator precedence.
! An expression evaluates to a Value (a string, int, real, char, bool, user type)
! non left recursive type patterned after Mouse PEG parser http://www.romanredz.se/Mouse/C.peg
! ===================================================================

! 0 or more expressions, used in assignments and function lists
<Expression List0> ::=  <Expression List1> | 
! 1 or more expressions
<Expression List1> ::= <Expression> | <Expression> ',' <Expression List1>
                          
<PrimaryExpression> ::= <Literal>
                      | <Function Call>              
                      | ID                           ! identifier
                      | '(' <Expression> ')'         ! sub expression

<Literal>           ::= BinLiteral
                      | HexLiteral
                      | DecLiteral  
                      | StringLiteral
                      | CharLiteral
                      | FloatLiteral
                      | true | false
           

<PostfixExpression> ::= <PrimaryExpression> <Post2>
<Post2> ::= <Post3> <Post2> |
<Post3> ::= '[' <Expression List1> ']'
          | '(' <Expression List0> ')'
          | '.' ID
          | '++'
          | '--'

<UnaryExpression> ::= <PostfixExpression>
                    | '++' <UnaryExpression>
                    | '--' <UnaryExpression>
                    | <UnaryOperator> <UnaryExpression>

<UnaryOperator>            ::= '*'  | '+' | '-' | '~' | '!'
   
<MultiplicativeExpression> ::= <UnaryExpression> | <UnaryExpression> <MultOp> <MultiplicativeExpression>
<MultOp>                   ::= '*' | '/' | '%'

<AdditiveExpression>       ::= <MultiplicativeExpression> | <MultiplicativeExpression> <AddOp> <AdditiveExpression>
<AddOp>                    ::= '+' | '-'

<RotateExpression>         ::= <AdditiveExpression> | <AdditiveExpression> <RotOp> <RotateExpression>
<RotOp>                    ::= '<<<' | '>>>'                             

<ShiftExpression>          ::= <RotateExpression> | <RotateExpression> <ShiftOp> <ShiftExpression>
<ShiftOp>                  ::= '<<' | '>>'                             

<RelationalExpression>     ::= <ShiftExpression> | <ShiftExpression> <RelOp> <RelationalExpression>
<RelOp>                    ::= '<=' | '>=' | '<' | '>'        

<EqualityExpression>       ::= <RelationalExpression> | <RelationalExpression> <EqOp> <EqualityExpression>
<EqOp>                     ::= '==' | '!='     
 
<ANDExpression>            ::= <EqualityExpression>    | <EqualityExpression>    '&'  <ANDExpression>
<ExclusiveORExpression>    ::= <ANDExpression>         | <ANDExpression>         '^'  <ExclusiveORExpression>
<InclusiveORExpression>    ::= <ExclusiveORExpression> | <ExclusiveORExpression> '|'  <InclusiveORExpression>
<LogicalANDExpression>     ::= <InclusiveORExpression> | <InclusiveORExpression> '&&' <LogicalANDExpression>
<LogicalORExpression>      ::= <LogicalANDExpression>  | <LogicalANDExpression>  '||' <LogicalORExpression>

<Expression>               ::= <LogicalORExpression>
                
! END OF GRAMMAR
